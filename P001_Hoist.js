
/*
호이스트란 변수의 정의가 그 범위에 따라 선언과 할당으로 
분리되는 것을 의미한다. 즉, 변수가 함수 내에서 정의되었을 경우
선언이 함수의 최상위로, 함수 바깥에서 정의되었을 경우, 전역 컨텍스트의 최상의로 변경이 된다. 
*/

function getX(){

console.log(x);  //undefined
//다른 언어라면 여기서부터 오류가 발생할 터이지만 
//자바스크립트에서는 undefined라고 하고 넘어간다. 
//하지만 var x =100; 이 구문에서 var x; 로 호이스팅 된다. 

//*자바스크립트의 원리
//선언문은 항시 자바스크립트 엔진 구동시 가장 최우선으로 해석하고
//할당 구문은 런타임 과정에서 이루어지기 떄문에, 호이스팅 되지 않는다. 

var x = 100; 


console.log(x);  //100

}

getX(); 


function getY(){

    var x; 
    console.log(x); 
    x=200; 
    console.log(x); 

}
getY();

//----------------------------------------
foo(); 
function foo(){
    console.log('HelloWorld');
}
//함수가 자신이 위치한 코드에 상관없이 
//함수 선언문 형태로 정의한 함수의 유효범위는 
//전체 코드의 맨 처음부터 시작한다. 

//함수 선언이 함수 실행 부분보다 뒤에 있더라도,
//자바스크립트 엔진이 함수 선언을 끌어올린다. 


/*
foo1(); 
var foo1 = function (){
    console.log("HelloWorld"); 
} */
//err 발생 
//이 구문이 실행되지 않는 부분은 
//함수 호이스팅은 함수를 끌어올리지만 변수의 값은 끌어올리지 않는다. 


//----------------------------------------